openapi: 3.0.0
info:
  title: Time Trial API
  description: 'API for saving times driven in Mario Kart 8 Deluxe Time Trials'
  version: v0.1
  contact:
    name: H-Rusch
    url: 'https://github.com/H-Rusch/SpringBoot-API/issues'
tags:
  - name: users-api
    description: API to store users in the database
  - name: times-api
    description: API to store times for users in the database
paths:
  /users:
    post:
      tags:
        - users-api
      summary: Create a user
      requestBody:
        description: The user to create. The 'password' and 'repeatedPassword' fields have to match.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
            example:
              username: 'Username'
              password: 'Password123'
              repeatedPassword: 'Password123'
      responses:
        '201':
          description: The created user object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
              example:
                userId: '4c8eac33-15ed-4ddd-b8cd-8f836d641ec5'
                username: 'Username'
        '409':
          description: CONFLICT as username is already taken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              example:
                status: CONFLICT
                message: 'The username has already been taken: Username'
                timestamp: '2023-11-14 12:28:42'

        '400':
          description: BAD REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              example:
                status: BAD_REQUEST
                message: 'Validation failed'
                timestamp: '2023-11-14 12:28:42'
                subErrors:
                  - type: validationError
                    field: password
                    rejectedValue: 12345678
                    message: "The given password has an invalid format. It must contain a letter and a digit."
                  - type: validationError
                    field: repeatedPassword
                    rejectedValue: 12345678
                    message: "The given password has an invalid format. It must contain a letter and a digit."

  /times:
    post:
      tags:
        - times-api
      summary: Create a time for a user
      requestBody:
        description: The time to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimeRequest'
            example:
              userId: '4c8eac33-15ed-4ddd-b8cd-8f836d641ec5'
              track: 'BABY_PARK_GCN'
              time: '1:05.480'
      responses:
        '201':
          description: The created time object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeDto'
              example:
                username: 'Username'
                track: 'GCN Baby Park'
                time: '1:05.480'
                createdAt: '2023-11-20 15:28:15'
        '409':
          description: CONFLICT the given user does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              example:
                status: CONFLICT
                message: 'User with the userId 4c8eac33-15ed-4ddd-b8cd-8f836d641ec5 does not exist.'
                timestamp: '2023-11-14 12:28:42'
        '400':
          description: BAD REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              example:
                status: BAD_REQUEST
                message: 'Validation failed'
                timestamp: '2023-11-14 12:28:42'
                subErrors:
                  - type: validationError
                    field: repeatedPassword
                    rejectedValue: abc1234567
                    message: 'The given passwords have to match.'

  /times/best:
    get:
      tags:
        - times-api
      summary: Get a list of the best time for each track
      parameters:
        - in: query
          name: username
          required: false
          schema:
            type: string
          description: An optional parameter that can be used to restrict the search to only return times for a specific user.

      responses:
        '200':
          description: A list of the best time for each track. If given a valid username, the list will only contain times for that user.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TimeDto'
              example:
                - username: 'Username'
                  track: 'GCN Baby Park'
                  time: '1:05.480'
                  createdAt: '2023-11-20 15:28:15'
                - username: 'Other Username'
                  track: 'Water Park'
                  time: '1:24.534'
                  createdAt: '2023-11-20 12:03:26'
        '204':
          description: NO_CONTENT an empty response signalling no times were found.
        '409':
          description: CONFLICT the given user does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              example:
                status: CONFLICT
                message: "User with the username 'username' does not exist."
                timestamp: '2023-11-14 12:28:42'
  /times/best/{track}:
    get:
      tags:
        - times-api
      summary: Get the best best time for a specific track
      parameters:
        - in: path
          name: track
          required: true
          schema:
            type: string
          description: Specify which track to get the best time for
        - in: query
          name: username
          required: false
          schema:
            type: string
          description: An optional parameter that can be used to restrict the search to only return times for a specific user.

      responses:
        '200':
          description: The best time for a track. If given a valid username, this will be the best time on the track for that user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeDto'
              example:
                username: 'Username'
                track: 'GCN Baby Park'
                time: '1:05.480'
                createdAt: '2023-11-20 15:28:15'
        '204':
          description: NO_CONTENT an empty response signalling no best time was found on that track (or for that user if specified).
        '400':
          description: BAD_REQUEST the track could not be built from the given string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              example:
                status: BAD_REQUEST
                message: "Track can not be built from value 'INVALID_TRACK'."
                timestamp: '2023-11-14 12:28:42'
        '409':
          description: CONFLICT the given user does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              example:
                status: CONFLICT
                message: "User with the username 'username' does not exist."
                timestamp: '2023-11-14 12:28:42'

components:
  schemas:
    ApiError:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        timestamp:
          type: string
          description: timestamp in the format 'yyyy-MM-dd HH:mm:ss'
        subErrors:
          type: array
          items:
            $ref: '#/components/schemas/ApiSubError'

    ApiSubError:
      oneOf:
        - $ref: '#/components/schemas/ApiValidationError'
      discriminator:
        propertyName: type
        mapping:
          validationError: '#/components/schemas/ApiValidationError'

    ApiValidationError:
      type: object
      properties:
        field:
          type: string
        rejectedValue:
          type: object
          description: The value for which the validation failed
        message:
          type: string

    UserDto:
      type: object
      properties:
        userId:
          type: string
        username:
          type: string

    UserRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 24
        password:
          type: string
          minLength: 8
        repeatedPassword:
          type: string
          minLength: 8
      required:
        - username
        - password
        - repeatedPassword

    TimeRequest:
      type: object
      properties:
        userId:
          type: string
          description: UUID of the user. A user with that id has to be present in the database
        track:
          type: string
          description: The track the time was created for. This has to match either the ENUM constant or the enum constant's pretty name.
        time:
          type: string
          description: The driven time. It has to be given in the format M:SS.msmsms

    TimeDto:
      type: object
      properties:
        username:
          type: string
        track:
          type: string
          description: Pretty name for the track
        time:
          type: string
        createdAt:
          type: string
          description: Timestamp when the time was created in the format 'yyyy-MM-dd HH:mm:ss'
